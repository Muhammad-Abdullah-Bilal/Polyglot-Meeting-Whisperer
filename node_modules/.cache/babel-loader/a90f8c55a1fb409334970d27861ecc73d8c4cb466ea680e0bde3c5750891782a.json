{"ast":null,"code":"var _jsxFileName = \"C:\\\\Downloads\\\\Downloads\\\\Polyglot-Meeting-Whisperer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import Dashboard from './components/Dashboard';\n// import TranscriptCard from './components/TranscriptCard';\n// import SettingsModal from './components/SettingsModal';\n// import ControlButtons from './components/ControlButtons';\n// import useAudioRecording from './hooks/useAudioRecording';\n// import { translate } from './utils/translator';\n// import './App.css';\n\n// const App = () => {\n//   const [transcript, setTranscript] = useState([]);\n//   const [translatedTranscript, setTranslatedTranscript] = useState([]);\n//   const [language, setLanguage] = useState('en');\n//   const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n//   const [currentTime, setCurrentTime] = useState(new Date());\n//   const [sessionStart, setSessionStart] = useState(null);\n//   const [sessionDuration, setSessionDuration] = useState('00:00');\n//   const [selectedOriginalLang, setSelectedOriginalLang] = useState('english');\n//   const [selectedTranslatedLang, setSelectedTranslatedLang] = useState('spanish');\n\n//   const { isRecording, isLoading, toggleRecording, simulateTranscription } = useAudioRecording({\n//     onTranscriptUpdate: (newData) => {\n//       setTranscript((prev) => [...prev, ...newData]);\n//       setTranslatedTranscript((prev) => [\n//         ...prev,\n//         ...newData.map((line) => ({ ...line, text: translate(line.text, language) }))\n//       ]);\n//     },\n//     onSessionStart: () => setSessionStart(Date.now())\n//   });\n\n//   // Timer effect\n//   useEffect(() => {\n//     const timer = setInterval(() => {\n//       setCurrentTime(new Date());\n//       if (sessionStart) {\n//         const elapsed = Math.floor((Date.now() - sessionStart) / 1000);\n//         const minutes = Math.floor(elapsed / 60);\n//         const seconds = elapsed % 60;\n//         setSessionDuration(`${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`);\n//       }\n//     }, 1000);\n//     return () => clearInterval(timer);\n//   }, [sessionStart]);\n\n//   const summary = {\n//     wordCount: transcript.reduce((acc, curr) => acc + curr.text.split(' ').length, 0),\n//     speakers: [...new Set(transcript.map((t) => t.speaker))].length,\n//     avgWords: transcript.length ? transcript.reduce((acc, curr) => acc + curr.text.split(' ').length, 0) / [...new Set(transcript.map((t) => t.speaker))].length : 0,\n//   };\n\n//   const resetTranscript = () => {\n//     setTranscript([]);\n//     setTranslatedTranscript([]);\n//     setSessionStart(null);\n//     setSessionDuration('00:00');\n//   };\n\n//   const handleExport = () => {\n//     const data = {\n//       session: {\n//         duration: sessionDuration,\n//         timestamp: new Date().toISOString(),\n//         summary\n//       },\n//       original: transcript,\n//       translated: translatedTranscript\n//     };\n\n//     const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n//     const url = URL.createObjectURL(blob);\n//     const a = document.createElement('a');\n//     a.href = url;\n//     a.download = `meeting-transcript-${new Date().toISOString().split('T')[0]}.json`;\n//     document.body.appendChild(a);\n//     a.click();\n//     document.body.removeChild(a);\n//     URL.revokeObjectURL(url);\n//   };\n\n//   const languageOptions = [\n//     { code: 'english', name: 'English', flag: '🇺🇸' },\n//     { code: 'spanish', name: 'Spanish', flag: '🇪🇸' },\n//     { code: 'french', name: 'French', flag: '🇫🇷' },\n//     { code: 'german', name: 'German', flag: '🇩🇪' },\n//     { code: 'chinese', name: 'Chinese', flag: '🇨🇳' },\n//   ];\n\n//   return (\n//     <div className=\"min-h-screen purple-gradient\">\n//       <div className=\"container mx-auto px-4 py-6\">\n//         {/* Header */}\n//         <div className=\"glass-card p-4 mb-6\">\n//           <div className=\"flex justify-between items-center\">\n//             <div className=\"flex items-center gap-3\">\n//               <div className=\"w-10 h-10 bg-gradient-to-r from-orange-400 to-pink-400 rounded-full flex items-center justify-center\">\n//                 <span className=\"text-white text-lg\">🌐</span>\n//               </div>\n//               <div>\n//                 <h1 className=\"text-white text-xl font-semibold\">Polyglot Meeting Whisperer</h1>\n//               </div>\n//             </div>\n//             <div className=\"text-white/80 text-sm\">\n//               {currentTime.toLocaleTimeString()}\n//             </div>\n//           </div>\n//         </div>\n\n//         {/* Control Buttons */}\n//         <ControlButtons\n//           isRecording={isRecording}\n//           onToggleRecording={toggleRecording}\n//           onOpenSettings={() => setIsSettingsOpen(true)}\n//           onReset={resetTranscript}\n//           onExport={handleExport}\n//         />\n\n//         {/* Dashboard */}\n//         <Dashboard \n//           wordCount={summary.wordCount} \n//           speakerCount={summary.speakers} \n//           avgWords={summary.avgWords}\n//           sessionDuration={sessionDuration}\n//         />\n\n//         {/* Transcript Cards */}\n//         <div className=\"grid grid-cols-2 gap-6\">\n//           <TranscriptCard\n//             title=\"Original Transcript\"\n//             emoji=\"📝\"\n//             gradient=\"from-orange-400 to-pink-400\"\n//             transcript={transcript}\n//             isLoading={isLoading}\n//             selectedLang={selectedOriginalLang}\n//             onLangChange={setSelectedOriginalLang}\n//             languageOptions={languageOptions}\n//             emptyMessage=\"No transcript yet. Start recording to begin transcription!\"\n//           />\n\n//           <TranscriptCard\n//             title=\"Translated (EN)\"\n//             emoji=\"🌍\"\n//             gradient=\"from-blue-400 to-purple-400\"\n//             transcript={translatedTranscript}\n//             isLoading={isLoading}\n//             selectedLang={selectedTranslatedLang}\n//             onLangChange={setSelectedTranslatedLang}\n//             languageOptions={languageOptions}\n//             emptyMessage=\"No translated transcript yet. Start recording to begin translation!\"\n//           />\n//         </div>\n\n//         {/* Settings Modal */}\n//         <SettingsModal\n//           isOpen={isSettingsOpen}\n//           onClose={() => setIsSettingsOpen(false)}\n//           language={language}\n//           onLanguageChange={setLanguage}\n//         />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport Dashboard from './components/Dashboard';\nimport TranscriptCard from './components/TranscriptCard';\nimport SettingsModal from './components/SettingsModal';\nimport ControlButtons from './components/ControlButtons';\nimport useAudioRecording from './hooks/useAudioRecording';\nimport { translate } from './utils/translator';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [transcript, setTranscript] = useState([]);\n  const [translatedTranscript, setTranslatedTranscript] = useState([]);\n  const [language, setLanguage] = useState('en');\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [sessionStart, setSessionStart] = useState(null);\n  const [sessionDuration, setSessionDuration] = useState('00:00');\n  const [selectedOriginalLang, setSelectedOriginalLang] = useState('english');\n  const [selectedTranslatedLang, setSelectedTranslatedLang] = useState('spanish');\n  const {\n    isRecording,\n    isLoading,\n    startRecording,\n    stopRecording,\n    resetRecording\n  } = useAudioRecording();\n\n  // Update current time every second\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n      if (sessionStart) {\n        const elapsed = Math.floor((Date.now() - sessionStart) / 1000);\n        const minutes = Math.floor(elapsed / 60);\n        const seconds = elapsed % 60;\n        setSessionDuration(`${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`);\n      }\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [sessionStart]);\n\n  // Handle recording state changes\n  useEffect(() => {\n    if (isRecording && !sessionStart) {\n      setSessionStart(Date.now());\n    } else if (!isRecording && sessionStart) {\n      // Process the recording result here\n      simulateTranscription();\n    }\n  }, [isRecording, sessionStart]);\n  const simulateTranscription = () => {\n    // Simulate transcription process\n    const fakeData = [{\n      speaker: 'Speaker 1',\n      time: new Date().toLocaleTimeString(),\n      text: 'Welcome to our quarterly review meeting.'\n    }, {\n      speaker: 'Speaker 2',\n      time: new Date().toLocaleTimeString(),\n      text: 'Thank you for joining us today.'\n    }, {\n      speaker: 'Speaker 3',\n      time: new Date().toLocaleTimeString(),\n      text: 'The results look very promising.'\n    }];\n    setTranscript(prev => [...prev, ...fakeData]);\n    setTranslatedTranscript(prev => [...prev, ...fakeData.map(line => ({\n      ...line,\n      text: translate(line.text, language)\n    }))]);\n  };\n  const handleStartRecording = () => {\n    startRecording();\n  };\n  const handleStopRecording = () => {\n    stopRecording();\n  };\n  const handleReset = () => {\n    resetRecording();\n    setTranscript([]);\n    setTranslatedTranscript([]);\n    setSessionStart(null);\n    setSessionDuration('00:00');\n  };\n  const handleExport = () => {\n    const dataToExport = {\n      originalTranscript: transcript,\n      translatedTranscript: translatedTranscript,\n      sessionDuration: sessionDuration,\n      exportTime: new Date().toISOString()\n    };\n    const blob = new Blob([JSON.stringify(dataToExport, null, 2)], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `meeting-transcript-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n  const handleSettingsOpen = () => {\n    setIsSettingsOpen(true);\n  };\n  const handleSettingsClose = () => {\n    setIsSettingsOpen(false);\n  };\n\n  // Calculate summary statistics\n  const summary = {\n    wordCount: transcript.reduce((acc, curr) => acc + curr.text.split(' ').length, 0),\n    speakers: [...new Set(transcript.map(t => t.speaker))].length,\n    avgWords: transcript.length ? transcript.reduce((acc, curr) => acc + curr.text.split(' ').length, 0) / [...new Set(transcript.map(t => t.speaker))].length : 0\n  };\n  const languageOptions = [{\n    code: 'english',\n    name: 'English',\n    flag: '🇺🇸'\n  }, {\n    code: 'spanish',\n    name: 'Spanish',\n    flag: '🇪🇸'\n  }, {\n    code: 'french',\n    name: 'French',\n    flag: '🇫🇷'\n  }, {\n    code: 'german',\n    name: 'German',\n    flag: '🇩🇪'\n  }, {\n    code: 'chinese',\n    name: 'Chinese',\n    flag: '🇨🇳'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"glass-card header\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-left\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"logo\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"\\uD83C\\uDF10\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Polyglot Meeting Whisperer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-time\",\n            children: currentTime.toLocaleTimeString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ControlButtons, {\n        isRecording: isRecording,\n        isLoading: isLoading,\n        onStartRecording: handleStartRecording,\n        onStopRecording: handleStopRecording,\n        onReset: handleReset,\n        onExport: handleExport,\n        onSettingsOpen: handleSettingsOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dashboard, {\n        wordCount: summary.wordCount,\n        speakerCount: summary.speakers,\n        avgWords: summary.avgWords,\n        sessionDuration: sessionDuration\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transcript-container\",\n        children: [/*#__PURE__*/_jsxDEV(TranscriptCard, {\n          title: \"Original Transcript\",\n          icon: \"\\uD83D\\uDCDD\",\n          transcript: transcript,\n          isLoading: isLoading,\n          languageOptions: languageOptions,\n          selectedLanguage: selectedOriginalLang,\n          onLanguageChange: setSelectedOriginalLang,\n          showAutoDetect: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TranscriptCard, {\n          title: \"Translated (EN)\",\n          icon: \"\\uD83C\\uDF0D\",\n          transcript: translatedTranscript,\n          isLoading: isLoading,\n          languageOptions: languageOptions,\n          selectedLanguage: selectedTranslatedLang,\n          onLanguageChange: setSelectedTranslatedLang,\n          showAutoDetect: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SettingsModal, {\n        isOpen: isSettingsOpen,\n        onClose: handleSettingsClose,\n        language: language,\n        setLanguage: setLanguage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 302,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"7Phb6httay/YFCTgY//sPBCEYj4=\", false, function () {\n  return [useAudioRecording];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Dashboard","TranscriptCard","SettingsModal","ControlButtons","useAudioRecording","translate","jsxDEV","_jsxDEV","App","_s","transcript","setTranscript","translatedTranscript","setTranslatedTranscript","language","setLanguage","isSettingsOpen","setIsSettingsOpen","currentTime","setCurrentTime","Date","sessionStart","setSessionStart","sessionDuration","setSessionDuration","selectedOriginalLang","setSelectedOriginalLang","selectedTranslatedLang","setSelectedTranslatedLang","isRecording","isLoading","startRecording","stopRecording","resetRecording","timer","setInterval","elapsed","Math","floor","now","minutes","seconds","toString","padStart","clearInterval","simulateTranscription","fakeData","speaker","time","toLocaleTimeString","text","prev","map","line","handleStartRecording","handleStopRecording","handleReset","handleExport","dataToExport","originalTranscript","exportTime","toISOString","blob","Blob","JSON","stringify","type","url","URL","createObjectURL","a","document","createElement","href","download","split","body","appendChild","click","removeChild","revokeObjectURL","handleSettingsOpen","handleSettingsClose","summary","wordCount","reduce","acc","curr","length","speakers","Set","t","avgWords","languageOptions","code","name","flag","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onStartRecording","onStopRecording","onReset","onExport","onSettingsOpen","speakerCount","title","icon","selectedLanguage","onLanguageChange","showAutoDetect","isOpen","onClose","_c","$RefreshReg$"],"sources":["C:/Downloads/Downloads/Polyglot-Meeting-Whisperer/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import Dashboard from './components/Dashboard';\r\n// import TranscriptCard from './components/TranscriptCard';\r\n// import SettingsModal from './components/SettingsModal';\r\n// import ControlButtons from './components/ControlButtons';\r\n// import useAudioRecording from './hooks/useAudioRecording';\r\n// import { translate } from './utils/translator';\r\n// import './App.css';\r\n\r\n// const App = () => {\r\n//   const [transcript, setTranscript] = useState([]);\r\n//   const [translatedTranscript, setTranslatedTranscript] = useState([]);\r\n//   const [language, setLanguage] = useState('en');\r\n//   const [isSettingsOpen, setIsSettingsOpen] = useState(false);\r\n//   const [currentTime, setCurrentTime] = useState(new Date());\r\n//   const [sessionStart, setSessionStart] = useState(null);\r\n//   const [sessionDuration, setSessionDuration] = useState('00:00');\r\n//   const [selectedOriginalLang, setSelectedOriginalLang] = useState('english');\r\n//   const [selectedTranslatedLang, setSelectedTranslatedLang] = useState('spanish');\r\n\r\n//   const { isRecording, isLoading, toggleRecording, simulateTranscription } = useAudioRecording({\r\n//     onTranscriptUpdate: (newData) => {\r\n//       setTranscript((prev) => [...prev, ...newData]);\r\n//       setTranslatedTranscript((prev) => [\r\n//         ...prev,\r\n//         ...newData.map((line) => ({ ...line, text: translate(line.text, language) }))\r\n//       ]);\r\n//     },\r\n//     onSessionStart: () => setSessionStart(Date.now())\r\n//   });\r\n\r\n//   // Timer effect\r\n//   useEffect(() => {\r\n//     const timer = setInterval(() => {\r\n//       setCurrentTime(new Date());\r\n//       if (sessionStart) {\r\n//         const elapsed = Math.floor((Date.now() - sessionStart) / 1000);\r\n//         const minutes = Math.floor(elapsed / 60);\r\n//         const seconds = elapsed % 60;\r\n//         setSessionDuration(`${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`);\r\n//       }\r\n//     }, 1000);\r\n//     return () => clearInterval(timer);\r\n//   }, [sessionStart]);\r\n\r\n//   const summary = {\r\n//     wordCount: transcript.reduce((acc, curr) => acc + curr.text.split(' ').length, 0),\r\n//     speakers: [...new Set(transcript.map((t) => t.speaker))].length,\r\n//     avgWords: transcript.length ? transcript.reduce((acc, curr) => acc + curr.text.split(' ').length, 0) / [...new Set(transcript.map((t) => t.speaker))].length : 0,\r\n//   };\r\n\r\n//   const resetTranscript = () => {\r\n//     setTranscript([]);\r\n//     setTranslatedTranscript([]);\r\n//     setSessionStart(null);\r\n//     setSessionDuration('00:00');\r\n//   };\r\n\r\n//   const handleExport = () => {\r\n//     const data = {\r\n//       session: {\r\n//         duration: sessionDuration,\r\n//         timestamp: new Date().toISOString(),\r\n//         summary\r\n//       },\r\n//       original: transcript,\r\n//       translated: translatedTranscript\r\n//     };\r\n    \r\n//     const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\r\n//     const url = URL.createObjectURL(blob);\r\n//     const a = document.createElement('a');\r\n//     a.href = url;\r\n//     a.download = `meeting-transcript-${new Date().toISOString().split('T')[0]}.json`;\r\n//     document.body.appendChild(a);\r\n//     a.click();\r\n//     document.body.removeChild(a);\r\n//     URL.revokeObjectURL(url);\r\n//   };\r\n\r\n//   const languageOptions = [\r\n//     { code: 'english', name: 'English', flag: '🇺🇸' },\r\n//     { code: 'spanish', name: 'Spanish', flag: '🇪🇸' },\r\n//     { code: 'french', name: 'French', flag: '🇫🇷' },\r\n//     { code: 'german', name: 'German', flag: '🇩🇪' },\r\n//     { code: 'chinese', name: 'Chinese', flag: '🇨🇳' },\r\n//   ];\r\n\r\n//   return (\r\n//     <div className=\"min-h-screen purple-gradient\">\r\n//       <div className=\"container mx-auto px-4 py-6\">\r\n//         {/* Header */}\r\n//         <div className=\"glass-card p-4 mb-6\">\r\n//           <div className=\"flex justify-between items-center\">\r\n//             <div className=\"flex items-center gap-3\">\r\n//               <div className=\"w-10 h-10 bg-gradient-to-r from-orange-400 to-pink-400 rounded-full flex items-center justify-center\">\r\n//                 <span className=\"text-white text-lg\">🌐</span>\r\n//               </div>\r\n//               <div>\r\n//                 <h1 className=\"text-white text-xl font-semibold\">Polyglot Meeting Whisperer</h1>\r\n//               </div>\r\n//             </div>\r\n//             <div className=\"text-white/80 text-sm\">\r\n//               {currentTime.toLocaleTimeString()}\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Control Buttons */}\r\n//         <ControlButtons\r\n//           isRecording={isRecording}\r\n//           onToggleRecording={toggleRecording}\r\n//           onOpenSettings={() => setIsSettingsOpen(true)}\r\n//           onReset={resetTranscript}\r\n//           onExport={handleExport}\r\n//         />\r\n\r\n//         {/* Dashboard */}\r\n//         <Dashboard \r\n//           wordCount={summary.wordCount} \r\n//           speakerCount={summary.speakers} \r\n//           avgWords={summary.avgWords}\r\n//           sessionDuration={sessionDuration}\r\n//         />\r\n\r\n//         {/* Transcript Cards */}\r\n//         <div className=\"grid grid-cols-2 gap-6\">\r\n//           <TranscriptCard\r\n//             title=\"Original Transcript\"\r\n//             emoji=\"📝\"\r\n//             gradient=\"from-orange-400 to-pink-400\"\r\n//             transcript={transcript}\r\n//             isLoading={isLoading}\r\n//             selectedLang={selectedOriginalLang}\r\n//             onLangChange={setSelectedOriginalLang}\r\n//             languageOptions={languageOptions}\r\n//             emptyMessage=\"No transcript yet. Start recording to begin transcription!\"\r\n//           />\r\n\r\n//           <TranscriptCard\r\n//             title=\"Translated (EN)\"\r\n//             emoji=\"🌍\"\r\n//             gradient=\"from-blue-400 to-purple-400\"\r\n//             transcript={translatedTranscript}\r\n//             isLoading={isLoading}\r\n//             selectedLang={selectedTranslatedLang}\r\n//             onLangChange={setSelectedTranslatedLang}\r\n//             languageOptions={languageOptions}\r\n//             emptyMessage=\"No translated transcript yet. Start recording to begin translation!\"\r\n//           />\r\n//         </div>\r\n\r\n//         {/* Settings Modal */}\r\n//         <SettingsModal\r\n//           isOpen={isSettingsOpen}\r\n//           onClose={() => setIsSettingsOpen(false)}\r\n//           language={language}\r\n//           onLanguageChange={setLanguage}\r\n//         />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport Dashboard from './components/Dashboard';\r\nimport TranscriptCard from './components/TranscriptCard';\r\nimport SettingsModal from './components/SettingsModal';\r\nimport ControlButtons from './components/ControlButtons';\r\nimport useAudioRecording from './hooks/useAudioRecording';\r\nimport { translate } from './utils/translator';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const [transcript, setTranscript] = useState([]);\r\n  const [translatedTranscript, setTranslatedTranscript] = useState([]);\r\n  const [language, setLanguage] = useState('en');\r\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\r\n  const [currentTime, setCurrentTime] = useState(new Date());\r\n  const [sessionStart, setSessionStart] = useState(null);\r\n  const [sessionDuration, setSessionDuration] = useState('00:00');\r\n  const [selectedOriginalLang, setSelectedOriginalLang] = useState('english');\r\n  const [selectedTranslatedLang, setSelectedTranslatedLang] = useState('spanish');\r\n  \r\n  const {\r\n    isRecording,\r\n    isLoading,\r\n    startRecording,\r\n    stopRecording,\r\n    resetRecording\r\n  } = useAudioRecording();\r\n\r\n  // Update current time every second\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setCurrentTime(new Date());\r\n      if (sessionStart) {\r\n        const elapsed = Math.floor((Date.now() - sessionStart) / 1000);\r\n        const minutes = Math.floor(elapsed / 60);\r\n        const seconds = elapsed % 60;\r\n        setSessionDuration(`${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`);\r\n      }\r\n    }, 1000);\r\n    return () => clearInterval(timer);\r\n  }, [sessionStart]);\r\n\r\n  // Handle recording state changes\r\n  useEffect(() => {\r\n    if (isRecording && !sessionStart) {\r\n      setSessionStart(Date.now());\r\n    } else if (!isRecording && sessionStart) {\r\n      // Process the recording result here\r\n      simulateTranscription();\r\n    }\r\n  }, [isRecording, sessionStart]);\r\n\r\n  const simulateTranscription = () => {\r\n    // Simulate transcription process\r\n    const fakeData = [\r\n      { speaker: 'Speaker 1', time: new Date().toLocaleTimeString(), text: 'Welcome to our quarterly review meeting.' },\r\n      { speaker: 'Speaker 2', time: new Date().toLocaleTimeString(), text: 'Thank you for joining us today.' },\r\n      { speaker: 'Speaker 3', time: new Date().toLocaleTimeString(), text: 'The results look very promising.' },\r\n    ];\r\n    \r\n    setTranscript(prev => [...prev, ...fakeData]);\r\n    setTranslatedTranscript(prev => [\r\n      ...prev, \r\n      ...fakeData.map(line => ({ \r\n        ...line, \r\n        text: translate(line.text, language) \r\n      }))\r\n    ]);\r\n  };\r\n\r\n  const handleStartRecording = () => {\r\n    startRecording();\r\n  };\r\n\r\n  const handleStopRecording = () => {\r\n    stopRecording();\r\n  };\r\n\r\n  const handleReset = () => {\r\n    resetRecording();\r\n    setTranscript([]);\r\n    setTranslatedTranscript([]);\r\n    setSessionStart(null);\r\n    setSessionDuration('00:00');\r\n  };\r\n\r\n  const handleExport = () => {\r\n    const dataToExport = {\r\n      originalTranscript: transcript,\r\n      translatedTranscript: translatedTranscript,\r\n      sessionDuration: sessionDuration,\r\n      exportTime: new Date().toISOString()\r\n    };\r\n    \r\n    const blob = new Blob([JSON.stringify(dataToExport, null, 2)], { type: 'application/json' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `meeting-transcript-${new Date().toISOString().split('T')[0]}.json`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const handleSettingsOpen = () => {\r\n    setIsSettingsOpen(true);\r\n  };\r\n\r\n  const handleSettingsClose = () => {\r\n    setIsSettingsOpen(false);\r\n  };\r\n\r\n  // Calculate summary statistics\r\n  const summary = {\r\n    wordCount: transcript.reduce((acc, curr) => acc + curr.text.split(' ').length, 0),\r\n    speakers: [...new Set(transcript.map(t => t.speaker))].length,\r\n    avgWords: transcript.length ? \r\n      transcript.reduce((acc, curr) => acc + curr.text.split(' ').length, 0) / \r\n      [...new Set(transcript.map(t => t.speaker))].length : 0,\r\n  };\r\n\r\n  const languageOptions = [\r\n    { code: 'english', name: 'English', flag: '🇺🇸' },\r\n    { code: 'spanish', name: 'Spanish', flag: '🇪🇸' },\r\n    { code: 'french', name: 'French', flag: '🇫🇷' },\r\n    { code: 'german', name: 'German', flag: '🇩🇪' },\r\n    { code: 'chinese', name: 'Chinese', flag: '🇨🇳' },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"container\">\r\n        {/* Header */}\r\n        <div className=\"glass-card header\">\r\n          <div className=\"header-content\">\r\n            <div className=\"header-left\">\r\n              <div className=\"logo\">\r\n                <span>🌐</span>\r\n              </div>\r\n              <div>\r\n                <h1>Polyglot Meeting Whisperer</h1>\r\n              </div>\r\n            </div>\r\n            <div className=\"header-time\">\r\n              {currentTime.toLocaleTimeString()}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Control Buttons */}\r\n        <ControlButtons\r\n          isRecording={isRecording}\r\n          isLoading={isLoading}\r\n          onStartRecording={handleStartRecording}\r\n          onStopRecording={handleStopRecording}\r\n          onReset={handleReset}\r\n          onExport={handleExport}\r\n          onSettingsOpen={handleSettingsOpen}\r\n        />\r\n\r\n        {/* Dashboard */}\r\n        <Dashboard \r\n          wordCount={summary.wordCount} \r\n          speakerCount={summary.speakers} \r\n          avgWords={summary.avgWords}\r\n          sessionDuration={sessionDuration}\r\n        />\r\n\r\n        {/* Transcript Cards */}\r\n        <div className=\"transcript-container\">\r\n          <TranscriptCard\r\n            title=\"Original Transcript\"\r\n            icon=\"📝\"\r\n            transcript={transcript}\r\n            isLoading={isLoading}\r\n            languageOptions={languageOptions}\r\n            selectedLanguage={selectedOriginalLang}\r\n            onLanguageChange={setSelectedOriginalLang}\r\n            showAutoDetect={true}\r\n          />\r\n          \r\n          <TranscriptCard\r\n            title=\"Translated (EN)\"\r\n            icon=\"🌍\"\r\n            transcript={translatedTranscript}\r\n            isLoading={isLoading}\r\n            languageOptions={languageOptions}\r\n            selectedLanguage={selectedTranslatedLang}\r\n            onLanguageChange={setSelectedTranslatedLang}\r\n            showAutoDetect={false}\r\n          />\r\n        </div>\r\n\r\n        {/* Settings Modal */}\r\n        <SettingsModal\r\n          isOpen={isSettingsOpen}\r\n          onClose={handleSettingsClose}\r\n          language={language}\r\n          setLanguage={setLanguage}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,iBAAiB,MAAM,2BAA2B;AACzD,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACc,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGf,QAAQ,CAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}