{"ast":null,"code":"// Simple translation utility (in a real app, you'd use a proper translation API)\nexport const translate = (text, targetLanguage) => {\n  const translations = {\n    es: {\n      // Spanish\n      'Welcome to our quarterly review meeting.': 'Bienvenido a nuestra reuniÃ³n trimestral.',\n      'Thank you for joining us today.': 'Gracias por acompaÃ±arnos hoy.',\n      'The results look very promising.': 'Los resultados se ven muy prometedores.',\n      'Meeting in progress...': 'ReuniÃ³n en progreso...'\n    },\n    fr: {\n      // French\n      'Welcome to our quarterly review meeting.': 'Bienvenue Ã  notre rÃ©union trimestrielle.',\n      'Thank you for joining us today.': 'Merci de nous avoir rejoint aujourd\\'hui.',\n      'The results look very promising.': 'Les rÃ©sultats semblent trÃ¨s prometteurs.',\n      'Meeting in progress...': 'RÃ©union en cours...'\n    },\n    de: {\n      // German\n      'Welcome to our quarterly review meeting.': 'Willkommen zu unserem vierteljÃ¤hrlichen Review-Meeting.',\n      'Thank you for joining us today.': 'Vielen Dank, dass Sie heute bei uns sind.',\n      'The results look very promising.': 'Die Ergebnisse sehen sehr vielversprechend aus.',\n      'Meeting in progress...': 'Besprechung lÃ¤uft...'\n    }\n  };\n  if (targetLanguage === 'en' || !translations[targetLanguage]) {\n    return text;\n  }\n  return translations[targetLanguage][text] || text;\n};\nexport const getLanguageOptions = () => [{\n  code: 'english',\n  name: 'English',\n  flag: 'ðŸ‡ºðŸ‡¸'\n}, {\n  code: 'spanish',\n  name: 'Spanish',\n  flag: 'ðŸ‡ªðŸ‡¸'\n}, {\n  code: 'french',\n  name: 'French',\n  flag: 'ðŸ‡«ðŸ‡·'\n}, {\n  code: 'german',\n  name: 'German',\n  flag: 'ðŸ‡©ðŸ‡ª'\n}, {\n  code: 'chinese',\n  name: 'Chinese',\n  flag: 'ðŸ‡¨ðŸ‡³'\n}];","map":{"version":3,"names":["translate","text","targetLanguage","translations","es","fr","de","getLanguageOptions","code","name","flag"],"sources":["C:/Downloads/Downloads/Polyglot-Meeting-Whisperer/src/utils/translator.js"],"sourcesContent":["// Simple translation utility (in a real app, you'd use a proper translation API)\r\nexport const translate = (text, targetLanguage) => {\r\n  const translations = {\r\n    es: { // Spanish\r\n      'Welcome to our quarterly review meeting.': 'Bienvenido a nuestra reuniÃ³n trimestral.',\r\n      'Thank you for joining us today.': 'Gracias por acompaÃ±arnos hoy.',\r\n      'The results look very promising.': 'Los resultados se ven muy prometedores.',\r\n      'Meeting in progress...': 'ReuniÃ³n en progreso...'\r\n    },\r\n    fr: { // French\r\n      'Welcome to our quarterly review meeting.': 'Bienvenue Ã  notre rÃ©union trimestrielle.',\r\n      'Thank you for joining us today.': 'Merci de nous avoir rejoint aujourd\\'hui.',\r\n      'The results look very promising.': 'Les rÃ©sultats semblent trÃ¨s prometteurs.',\r\n      'Meeting in progress...': 'RÃ©union en cours...'\r\n    },\r\n    de: { // German\r\n      'Welcome to our quarterly review meeting.': 'Willkommen zu unserem vierteljÃ¤hrlichen Review-Meeting.',\r\n      'Thank you for joining us today.': 'Vielen Dank, dass Sie heute bei uns sind.',\r\n      'The results look very promising.': 'Die Ergebnisse sehen sehr vielversprechend aus.',\r\n      'Meeting in progress...': 'Besprechung lÃ¤uft...'\r\n    }\r\n  };\r\n\r\n  if (targetLanguage === 'en' || !translations[targetLanguage]) {\r\n    return text;\r\n  }\r\n\r\n  return translations[targetLanguage][text] || text;\r\n};\r\n\r\nexport const getLanguageOptions = () => [\r\n  { code: 'english', name: 'English', flag: 'ðŸ‡ºðŸ‡¸' },\r\n  { code: 'spanish', name: 'Spanish', flag: 'ðŸ‡ªðŸ‡¸' },\r\n  { code: 'french', name: 'French', flag: 'ðŸ‡«ðŸ‡·' },\r\n  { code: 'german', name: 'German', flag: 'ðŸ‡©ðŸ‡ª' },\r\n  { code: 'chinese', name: 'Chinese', flag: 'ðŸ‡¨ðŸ‡³' },\r\n];"],"mappings":"AAAA;AACA,OAAO,MAAMA,SAAS,GAAGA,CAACC,IAAI,EAAEC,cAAc,KAAK;EACjD,MAAMC,YAAY,GAAG;IACnBC,EAAE,EAAE;MAAE;MACJ,0CAA0C,EAAE,0CAA0C;MACtF,iCAAiC,EAAE,+BAA+B;MAClE,kCAAkC,EAAE,yCAAyC;MAC7E,wBAAwB,EAAE;IAC5B,CAAC;IACDC,EAAE,EAAE;MAAE;MACJ,0CAA0C,EAAE,0CAA0C;MACtF,iCAAiC,EAAE,2CAA2C;MAC9E,kCAAkC,EAAE,0CAA0C;MAC9E,wBAAwB,EAAE;IAC5B,CAAC;IACDC,EAAE,EAAE;MAAE;MACJ,0CAA0C,EAAE,yDAAyD;MACrG,iCAAiC,EAAE,2CAA2C;MAC9E,kCAAkC,EAAE,iDAAiD;MACrF,wBAAwB,EAAE;IAC5B;EACF,CAAC;EAED,IAAIJ,cAAc,KAAK,IAAI,IAAI,CAACC,YAAY,CAACD,cAAc,CAAC,EAAE;IAC5D,OAAOD,IAAI;EACb;EAEA,OAAOE,YAAY,CAACD,cAAc,CAAC,CAACD,IAAI,CAAC,IAAIA,IAAI;AACnD,CAAC;AAED,OAAO,MAAMM,kBAAkB,GAAGA,CAAA,KAAM,CACtC;EAAEC,IAAI,EAAE,SAAS;EAAEC,IAAI,EAAE,SAAS;EAAEC,IAAI,EAAE;AAAO,CAAC,EAClD;EAAEF,IAAI,EAAE,SAAS;EAAEC,IAAI,EAAE,SAAS;EAAEC,IAAI,EAAE;AAAO,CAAC,EAClD;EAAEF,IAAI,EAAE,QAAQ;EAAEC,IAAI,EAAE,QAAQ;EAAEC,IAAI,EAAE;AAAO,CAAC,EAChD;EAAEF,IAAI,EAAE,QAAQ;EAAEC,IAAI,EAAE,QAAQ;EAAEC,IAAI,EAAE;AAAO,CAAC,EAChD;EAAEF,IAAI,EAAE,SAAS;EAAEC,IAAI,EAAE,SAAS;EAAEC,IAAI,EAAE;AAAO,CAAC,CACnD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}